#1
df["per_bill"] = df["total_bill"] / df["size"]
df["per_bill"].describe()

        # df["컬럼"]이 수치형 변수라면 컬럼간의 사칙연산이 가능하다.
        
        
#2       
df.groupby(by = ["time", "smoker"])["per_bill"].describe()

        # df.groupby(by = ["1차컬럼", "2차컬럼", "...""])["목표컬럼"].describe()
        

#3
group_per.loc["Lunch"]
group_per.iloc[0:2]

        # iloc는 인덱스를 숫자로 치환해주는 역할.
        # loc는 인덱스 명을 그대로 가져오는 역할.


#4        
df.groupby(by = ["day", "smoker"])["size"].agg(["count","mean"])

        # agg(["count", "mean"])을 통해 count와 mean을 집계함수로 표현
        
        
#5        
mpg_drop = mpg.dropna(axis = 0, how = "any")
mpg_drop.groupby(by = ["origin"])["weight"].mean()

        # mpg.dropna(axis = 0, how = "any") 를 통해 결측치가 있는 행(axis = 0)은 모두 제거하여 mpg_drop라는 변수로 지정
        # mpg_drop에 대해서 groupby로 weight의 평균값을 구함
        
        
#6        
mpg_audi = mpg[mpg["name"].str.contains("audi")]
mpg_audi["horsepower"].describe()

    # mpg 데이터프레임에서 mpg["name"] 컬럼 내 str.contains("audi")하는 새로운 데이터프레임을 mpg_audi라는 변수로 지정
    # mpg_audi["horsepower"] 컬럼에 대한 요약값 출력
    
   
#7   
mpg_diesel = mpg[mpg["name"].str.contains("diesel")]
mpg_diesel.groupby(by = ["origin", "model_year"])["horsepower"].mean()

    # mpg 데이터프레임에서 mpg["name"]컬럼에서 str.contains("diesel")인 새로운 데이터프레임을 변수 mpg_diesel로 지정
    # mpg_diesel에 대해서 groupby를 통해 그룹화하고 horsepower의 평균 출력
    
        
#8
mpg_75 = mpg[mpg["model_year"] < 75]
pd.pivot_table(data = mpg_75, index = "model_year", columns = "origin", values = "weight")


    # 오류사항에서 pivot_table() got an unexpected keyword argument 'value'라고 뜨는건 'value' 스펠링이 잘못되었다는 것.


pd.pivot_table(data = mpg_75, index = ["model_year", "origin"], values = "weight").unstack(-1)

    # 멀티 index인 경우 unstack을 통해 index를 컬럼으로 가져올 수 있음.
    # unstack()은 unstack(-1)이 기본값.   (오른쪽부터 -1)



    
#9    
sns.scatterplot(data = mpg, x = "horsepower", y = "weight", hue = "cylinders")

    $ scatterplot을 기본으로 x축은 "horsepower", y축은 "weight", hue를 통해 cylinders에 따라 구분하여 색상 변경하여 출력
    
