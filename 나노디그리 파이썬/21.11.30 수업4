%ls data                                                     # data 폴더에 있는 파일 확인하기

df_1 = pd.read_csv("data/seoul-covid19-2021-01-03.csv")      # data 폴더에 있는 csv 파일 불러와서 df_1로 변수 지정

df_all = pd.concat([df_01, df_02, df_03, df_04])             # pd.concat() -> 시리즈 내에 있는 데이터 프레임을 합치는 역할.
df_all.shape                                                 # 디폴트값은 axis = 0 으로 세로로 합침, axis = 1 은 가로로 합침.
                                                             # 제대로 합쳐졌는지 행,열 갯수 확인
                                                             
df_all.duplicaed("목표컬럼", keep = 'first')                  # 중복 여부 확인, keep = 'first'가 디폴트값. 중복의 첫번째 값은 True, 그 이외는 False로 출력됨. keep = 'last'는 반대
                                                             # keep = False 의 경우는 중복값을 모두 True로 출력 (중복값을 킵할 생각이 없을때)
df_all.drop_duplicates("목표컬럼", keep = 'last')             # drop_duplicates 를 통해 중복값 제거. keep = 'last'를 가지고 마지막것만 남김.
                                                             # duplicated vs drop_duplicats 스펠링 주의

df = df_all.drop_duplicates("연번", keep = "last").sort_values("연번", ascending = False)
                                                             # "연번"의 중복값 중 마지막 값을 남기고 제거 -> "연번"을 기준으로 오름차순 정렬.
                                                             
df.shape                                                     # 중복값 제거 후 shape와 nunique를 가지고 중복값이 없는 것 확인.
df["연번"].nunique
                                                             
                                                             
df = df.set_index("연번")                                    # 현재 df의 인덱스는 0,1,2... 인 상태
                                                             # df.set_index("연번") 을 통해 "연번"컬럼을 인덱스화 시킴
                                                             # 실행 이후 "연번"컬럼은 인덱스화 되었기 때문에 찾을 수 없음
                                                             
   
df["확진일"] = pd.to_datetime(df["확진일"])                   # 기존 df["확진일"]의 dtype은 object. 따라서 pd.to_datetime()을 통해 dtype을 datetime64[ns]로 변경
df["연도"] = df["확진일"].dt.year                             # df["확진일"] 컬럼의 dtype이 datetime64이므로, dt.year / dy.month / dt.day 로 출력해서 파생변수 지정가능.
df["월"] = df["확진일"].dt.month                              # 단 dayofweek로 출력되는 값은 0~6, 아직 월~일로 시리즈 지정이 안된 상태.
df["일"] = df["확진일"].dt.day
df["요일"] = df["확진일"].dt.dayofweek



df["확진일"].astype(str)                                      # 해당 컬럼의 dtype을 모두 object로 바꿔 줌
df["확진일"].astype(str).str[:7]                              # 확진일은 dtype이 datetime64이므로 2001-01-01 형태를 띔
                                                             # 따라서 [0:7]로 슬라이싱하면 2001-01만 가져옴
                                                             
                                                             
                                                             
dayofweek = "월화수목금토일"                                   # dayofweek에 "월화수목금토일" 지정해놓기

def find_dayofweek(day_no):                                   # find_dayofweek(day_no)라는 함수 지정하는 과정
    dayofweek = "월화수목금토일"                               # dayofweek에 "월화수목금토일"을 지정해놓고, 인덱싱해서 불러오는 함수 느낌.
    return dayofweek[day_no]
    
    
df["요일명"] = df["요일"].map(find_dayofweek)                  # df["요일"]컬럼의 값을 find_dayofweek 에서 map(맵핑)해서 가져옴. 이를 df["요일명"]이라는 컬럼에 지정


df.hist(figsize=(12, 6), bins=50)                             # 히스토그램 그릴때 figsize랑 bins 지정하는 방법


df["연도"].value_counts()                                     # 각 연도별 빈도수 구하기
df["연도"].value_counts(normalize = True)                     # 각 연도별 비율을 구할때는 normalize = True 들어가기.
df["연도월"].value_counts().sort_index                        #  각 연도월별 빈도수 구하고, 인덱스를 내림차순으로 정렬


weekday_list = [w for w in "월화수목금토일"]                   # 리스트컴프리헨션. weekday_list 변수에 [w for w in "월화수목금토일"]을 가지고 결과값으로 리스트 안에 7개 문자 만듬


last_day = df.iloc[0]["확진일"]                               # 첫번째[0] 행에서 "확진일"컬럼만 출력
first_day = df.iloc[-1]["확진일"]                             # 마지막[-1] 행에서 "확진일"컬럼만 출력


all_day = pd.date_range(start = first_day, end = last_day)    # pd.date_range(start = , end = )를 통해서 기간 데이터 설정 가능.
df_all_day = all_day.to_frame()                               # 데이터 프레임으로 변경
df_all_day["확진수"] = day_count                               # 확진수라는 새로운 컬럼에 day_count값 추가
del df_all_day[0]                                             # del을 통해서 필요없는 첫번쨰 컬럼 제거
df_all_day = df_all_day.fillna(0)                             # 결측치에 0 대입


df_all_day["누적확진수"] = df_all_day["확진수"].cumsum()        # cumsum()을 통해서 누적 합계를 구해낼 수 있음.


df_all_day.plot(secondary_y="확진수", figsize=(12,6))          # plot으로 시각화, secondary_y = "확진수"를 통해 y축에 sub 추가 가능.


df["거주구"] = df["거주구"].str.strip()                         # df["거주구"] 컬럼에서 공백 제거


df_yymm = pd.crosstab(df["연도"], df["월"])                     # df_yymm은 연도와 월로 이루어진 데이터프레임
df_yymm.T.plot.bar(rot = 0)                                    # T를 통해서 분류기준이 연도가 될지, 월이 될지 체크할 수 있음


yw = pd.crosstab(df["연도"], df["요일"])                        # 연도와 요일로 이루어진 데이터프레임을 yw라고 지정. (단 요일은 현재 0~6으로 출력됨)
weekday_list = [w for w in "월화수목금토일"]                    # weekday_list를 리스트컴프리헨션을 통해 지정
yw.columns = weekday_list                                      # yw의 컬럼을 weekday_list로 변경


gu_yymm.style.background_gradient()                            # 빈도수 시각화



df.loc[df["거주구"].isin(["강남구", "서초구", "송파구"]), "접촉력"].value_counts()
                                                                # 거주구 컬럼에서 "강남구, 서초구, 송파구"만 뽑아서 접촉력을 value_counts() 진행
                                                                
                                                                
                                                                
